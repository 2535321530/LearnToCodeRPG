#begin c_code1
#include <stdio.h>
int main()
{
    int i = 0;
    do {
        i++;
        printf("in while loop\n");
    } while (i < 3);
}
#end c_code1

#begin java_code1
import java. util.Hashtable;
import java. util.Map;
public class hashTableBlog {
    public static void main (String args[])
    {
        Map<Integer,String> hashtable = new Hashtable<Integer,String>();
        hashtable.put(11,”a”);
        hashtable.put(null,”c”);
        hashtable.put(null,null);

        System.out.println(hashtable.size());
        System.out.println(hashtable);
    }
}
#end java_code1

#begin java_code2
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class MyClass {
    public static void main(String args[])
    {
        Map<Integer,String> hashMap = new HashMap<Integer,String>();
        hashMap.put(11,”a”);
        Collections.unmodifiableMap(hashMap);
        hashMap.put(12,”b”);
        System.out.println(hashMap);
    }
}
#end java_code2

#begin java_code3
public static synchronized void main(String[] args) throws  
InterruptedException {  
     Thread f = new Thread();  
      f.start();  
      System.out.print("A");  
      f.wait(1000);  
      System.out.print("B");  
}
#end java_code3

#begin py_code1
print([0,[1,2,3,4,5][2],2][1])
#end py_code1

#begin py_code2
camp = ""
for x in range(5):
  camp += x
print(camp)
#end py_code2

#begin py_code3
import re
hand = open('mbox-short.txt')
for line in hand:
    line = line.rstrip()
    if re.search('^From:', line):
        print(line)
#end py_code3

#begin py_code4
width = 15
height = 12.0
print(height/3)
#end py_code4

#begin py_code5
mystock = {
"Product": "Earphone",
"Price": 800,
"Quantity": 50,
"InStock" : "Yes"
}
#end py_code5

#begin py_code6
tuple = {} 
tuple[(1,2,4)] = 8
tuple[(4,2,1)] = 10
tuple[(1,2)] = 12
sum = 0
for k in tuple: 
    sum += tuple[k] 
print(len(tuple) + sum)
#end py_code6

#begin js_code1
var foo = "Hello World";
var bar = foo.split('');
var baz = bar;
baz.reverse();

console.log(bar.join(''));
#end js_code1

#begin js_code2
var foo = {
    baz: 'Hello',
    bar: () => {
      console.log(this);
      return this.baz;
    }
};

console.log(foo.bar());
#end js_code2]

#begin js_code3
(function foo(a) {
  return function bar(b) {
    console.log(a);
  };
})('super')('cool');
#end js_code3

#begin js_code4
console.log(false == 0);
console.log(false === 0);
#end js_code4

#begin js_code5
for (var i = 0; i < 5; i++) {
  setTimeout(function() { console.log(i) }, i * 1000 );
}
#end js_code5

#begin js_code6
console.log(1 + -"1" + "2" + "2");
console.log("2" + "2" + 1 + -"1");
#end js_code6

#begin js_code7
var x;
console.log(x);
#end js_code7

#begin js_code8
function doesNodeExist(node, target) {

    if (node.value === target) {
        return true;
    } else if (target < node.value) {

        if (node.left !== null) {
            return doesNodeExist(node.left, target);
        } else {
            return false;
        }

    } else {

        if (node.right !== null) {
            return doesNodeExist(node.right, target);
        } else {
            return false;
        }

    }

}
#end js_code8

#begin js_code9
function findElement(array, target) {

    for (var i = 0; i < array.length; i++) {

        if (array[i] === target) {
            return array[i];
        }

    }

    return null;

}
#end js_code9

#begin js_code10
function createSearchFunction() {

    var cache = {};

    return function(target) {

        if (target in cache) {
            return cache[target];
        }

        /* executeSearch is complex
         * and defined elsewhere */
        var result = executeSearch(target);

        cache[target] = result;

        return result;

    }

};

var searchArchives = createSearchFunction();
#end js_code10

#begin js_code11
puzzle = true ? false ? "free" : true ? "code" : "camp" : false ? "courses" : "joke answer"
#end js_code11

#begin js_code12
var a = 10;
do {
   a += 1;
   console.log(a);
} while (a < 5);
#end js_code12